import Project, { EnumDeclarationStructure } from 'ts-simple-ast'
// import { exec, execSync } from 'child_process';
import { exec } from 'shelljs'
import { join, sep } from 'path';
import { writeFileSync } from 'fs';
// import { ok } from 'assert';

let project: Project
function getProject(): Project {
  if (!project) {
    project = new Project({
      useVirtualFileSystem: true
    })
  }
  return project
}
export function generateListEnum(listed: string) {

  const enumDeclaration: EnumDeclarationStructure = {
    name: listed,
    members: list(listed).map(n => ({
      name: n,
      initializer: `'${n}'`
    }))
  }
  const sourceFile = getProject().createSourceFile(`${listed}.ts`)
  sourceFile.addEnum(enumDeclaration)
  console.log(sourceFile.getText());
  return sourceFile
}

export function list(listed: string): string[] {

  const result = exec(`convert -list ${listed}`)
  // ok(result.code === 0, 'result.code: ' + result.code)
  const names = result.stdout.split('\n').filter(s => s.trim())
  return names
}

export function generateEnumsForAllLists() {
  list('list').forEach(name => {
    const sourceFile = generateListEnum(name)
    writeFileSync(`src${sep}list${sep}${name}.ts`, `/* autogenerated file using scripts/generateImEnums.ts */ \n${sourceFile.getText()}`)
  })
}