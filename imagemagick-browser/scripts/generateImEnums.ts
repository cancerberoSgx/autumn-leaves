import Project, { EnumDeclarationStructure } from 'ts-simple-ast'
import { exec, mkdir, rm, config } from 'shelljs'
import { join, sep } from 'path';
import { writeFileSync } from 'fs';
import { ok } from 'assert';
config.silent = true

// automatically generates TS enums from all convert -list list with few exceptions that are not usable/parsable
// Output folder - warning, it will be cleared
const FOLDER = `src${sep}list`
const EXCLUDE_FROM_LIST = ['Configure', 'Delegate', 'Magic', 'Mime', 'Threshold', 'Format', 'Coder', 'Color']

let project: Project
function getProject(): Project {
  if (!project) {
    project = new Project({
      useVirtualFileSystem: true
    })
  }
  return project
}
export function generateListEnum(listed: string) {
  const enumDeclaration: EnumDeclarationStructure = {
    name: listed,
    members: list(listed)
      .filter((v, i, a) => a.indexOf(v) === i) //)deduplicate 
      .map(n => ({
        name: `'${isNaN(parseInt(n, 10)) ? n : (n + '_')}'`,
        initializer: `'${n}'`
      })),
    isExported: true
  }
  const sourceFile = getProject().createSourceFile(`${listed}.ts`)
  sourceFile.addEnum(enumDeclaration)
  console.log(sourceFile.getText());
  return sourceFile
}

export function list(listed: string): string[] {
  const result = exec(`convert -list ${listed}`)
  // ok(result.code === 0, 'result.code: ' + result.code) // commented because of https://github.com/ImageMagick/ImageMagick/issues/1333
  const names = result.stdout.split('\n').filter(s => s.trim())
  return names
}

export function generateEnumsForAllLists() {
  rm('-rf', FOLDER)
  mkdir('-p', FOLDER)
  let indexContent = ''
  list('list')
    .filter(name => EXCLUDE_FROM_LIST.indexOf(name) === -1)
    .forEach(name => {
      const sourceFile = generateListEnum(name)
      indexContent += `export * from './${name}'\n`
      writeFileSync(`${FOLDER}${sep}${name}.ts`, `/* autogenerated file using scripts/generateImEnums.ts */ \n${sourceFile.getText()}`)
    })
  writeFileSync(`${FOLDER}${sep}index.ts`, indexContent)

}

generateEnumsForAllLists()