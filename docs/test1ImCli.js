// import * as test1 from './test1.js'
// const images = require('./test1').images
// console.log(test1);

const images = [
  { sourceUrl: 'rotate.png', targetId: 'outputImage1', outFile: 'rotateOut.png' },
  { sourceUrl: 'Hermitcrab.gif', targetId: 'outputImage3', outFile: 'HermitcrabOut.gif' },
  { sourceUrl: 'zelda.gif', targetId: 'outputImage5', outFile: 'zeldaOut.gif' },
  { sourceUrl: 'gnu.jpg', targetId: 'outputImage2', outFile: 'gnuOut.jpg' },
  { sourceUrl: 'react.svg', targetId: 'outputImage4', outFile: 'reactOut.png' },// doesn't work
  { sourceUrl: 'pic.tiff', targetId: 'outputImage6', outFile: 'picOut.png' },
  { sourceUrl: 'holocaust.jpg', targetId: 'outputImage7', outFile: 'holocaustOut.png' },
]

const transformations = [
  {
    id: 'distorBarrel1',
    name: 'distor barrel 1',
    command: ["convert", "$INPUT", "-distort", "barrel", "0.7 -0.009 0.0", "-resize", "200%", "$OUTPUT"]
  },
  {
    id: 'rotateAndResize1',
    name: 'rotate and resize',
    command: ["convert", "$INPUT", "-rotate", "90", "-resize", "200%", "$OUTPUT"]
  },
  {
    id: 'sigmoidalContrast1',
    name: 'sigmoidal contrast',
    command: ["convert", "$INPUT", "-sigmoidal-contrast", "4,0%", "$OUTPUT"]
  }, 
  {
    id: 'sparseColor1',
    name: 'sparseColor1',
    command: ["convert","$INPUT", "-sparse-color", "Barycentric", "0,0 black 0,%h white", "-function", "polynomial",
    "4,-4,1", "$OUTPUT"]
  }, 
  {
    id: 'composite1',
    name: 'composite 1',
    command: ["convert", "$INPUT", "-sigmoidal-contrast", "15x30%", "(", "+clone", "-sparse-color", "Barycentric", "0,0 black 0,%h gray80", "-solarize", "50%", "-level", "50%,0", ")", "-compose", "Blur", "-set", "option:compose:args", "10", "-composite", "$OUTPUT"]
  }, 
  {
    id: 'colorspaceChannelSeparate1',
    name: 'colorspaceChannelSeparate1',
    command: ["convert", "$INPUT", "-colorspace", "HSL", "-channel", "Hue", "-separate", "$OUTPUT"]
  },
]

function getImCommands(images, transformations) {
  function getOutputFile(dir, image, transformation) {
    return `${dir}/${transformation.id}_${image.outFile}`
  }
  const dir = 'test1ImOutput'
  const cmd = `
# autogenerated script that apply test1 transformations and images on the desktop so we can compare to the real thing
npm run build
cd docs
rm -rf ${dir}
mkdir ${dir}
${images.map(image => {
      return transformations
        .map(t => {
          const command = t.command.map(arg => arg === '$INPUT' ? image.sourceUrl : arg === '$OUTPUT' ? getOutputFile(dir, image, t) : toCliArg(arg))
          return command.join(' ')
        }).join('\n')
    }).join('\n')}
`
  return cmd
}

function toCliArg(arg){
  return arg.match(/[\s()]/) ? `'${arg}'` : arg
    // (arg.trim()==='('||arg.trim()===')') ? ('\\'+arg.trim()) : 
    // arg
}

console.log(getImCommands(images, transformations))
